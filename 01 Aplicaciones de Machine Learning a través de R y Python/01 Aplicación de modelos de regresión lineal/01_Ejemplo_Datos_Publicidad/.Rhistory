theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Relación entre el gasto en publicidad en periódicos y las ventas",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia con informción de \nURL: https://www.statlearning.com/s/Advertising.csv"
)
#ggsave("G_Advertising_newspaper.png", width = 20, height = 10, units = "cm")
summary(advertising)
Reg_01 <- lm(sales ~ TV + radio + newspaper,
data = advertising)
summary(Reg_01)
Reg_02 <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + newspaper,
data = advertising)
summary(Reg_02)
Reg_03 <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + I(radio^2) + I(radio^3) +
newspaper + I(newspaper^2) + I(newspaper^3),
data = advertising)
summary(Reg_03)
advertising$Reg_01 <- predict( Reg_01, advertising )
advertising$Reg_02 <- predict( Reg_02, advertising )
advertising$Reg_03 <- predict( Reg_03, advertising )
advertising_3 <- melt(advertising[ , c("sales", "Reg_01", "Reg_02", "Reg_03")],
id='sales')
names(advertising_3) <- c("Sales", "Model", "Predict")
tail(advertising_3)
ggplot(data = advertising_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
#
sst <- sum( ( advertising$sales - mean( advertising$sales ) )^2 , na.rm = TRUE)
sse_Reg_01 <- sum( ( advertising$Reg_01 - advertising$sales )^2 , na.rm = TRUE)
sse_Reg_02 <- sum( ( advertising$Reg_02 - advertising$sales )^2 , na.rm = TRUE)
sse_Reg_03 <- sum( ( advertising$Reg_03 - advertising$sales )^2 , na.rm = TRUE)
Results_Models <- data.frame( Modelo = c( "Model", "Model Poly(3-TV)", "Model Poly(3-All)"),
R.Sqrt_Est = c( 1 - sse_Reg_01/sst,
1 - sse_Reg_02/sst,
1 - sse_Reg_03/sst ) )
Results_Models
set.seed(1234) #
trainIndex <- createDataPartition( advertising$sales ,
p = 0.7 , times = 1, list = FALSE )
advertising_Train <- advertising[ trainIndex , ]
advertising_Valid <- advertising[ -trainIndex , ]
summary(advertising_Train[ , c("sales", "TV", "radio", "newspaper")])
summary(advertising_Valid[ , c("sales", "TV", "radio", "newspaper")])
Reg_Train <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + newspaper,
data = advertising_Train)
summary(Reg_Train)
advertising$Reg_OverAll <- predict( Reg_Train, advertising )
advertising_Train$Reg_OverTrain <- predict( Reg_Train, advertising_Train )
advertising_Valid$Reg_OverValid <- predict( Reg_Train, advertising_Valid )
sst_OverAll <- sum( ( advertising$sales - mean( advertising$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverAll <- sum( ( advertising$Reg_OverAll - advertising$sales )^2 , na.rm = TRUE)
sst_OverTrain <- sum( ( advertising_Train$sales - mean( advertising_Train$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverTrain <- sum( ( advertising_Train$Reg_OverTrain - advertising_Train$sales )^2 , na.rm = TRUE)
sst_OverValid <- sum( ( advertising_Valid$sales - mean( advertising_Valid$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverValid <- sum( ( advertising_Valid$Reg_OverValid - advertising_Valid$sales )^2 , na.rm = TRUE)
Results_Models <- data.frame( Modelo = c( "Muestra Total", "Muestra de Entrenamiento", "Muestra de Validación"),
R.Sqrt_Est = c( 1 - sse_Reg_OverAll/sst_OverAll,
1 - sse_Reg_OverTrain/sst_OverTrain,
1 - sse_Reg_OverValid/sst_OverValid ) )
Results_Models
advertising_Valid_3 <- melt(advertising_Valid[ , c("sales", "Reg_02", "Reg_OverValid")],
id='sales')
names(advertising_Valid_3) <- c("Sales", "Model", "Predict")
ggplot(data = advertising_Valid_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
#include = FALSE prevents code and results from appearing in the finished file. R Markdown still runs the code in the chunk, and the results can be used by other chunks.
#echo = FALSE prevents code, but not the results from appearing in the finished file. This is a useful way to embed figures.
#message = FALSE prevents messages that are generated by code from appearing in the finished file.
#warning = FALSE prevents warnings that are generated by code from appearing in the finished.
#fig.cap = "..." adds a caption to graphical results.
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")
#install.packages("hrbrthemes")
#install.packages("dplyr")
#install.packages("reshape2")
#install.packages("glmtoolbox") # Biblioteca que contiene los datos de Hastie, et. al (2013)
#install.packages("stats")
#install.packages("caret")
#
library(ggplot2)
library(hrbrthemes)
library(dplyr)
library(reshape2)
library(glmtoolbox)
library(stats)
library(caret)
data(advertising)
tail(advertising)
advertising_2 <- melt(advertising, id='sales')
View(advertising)
View(advertising_2)
advertising_2 <- melt(advertising, id='sales')
names(advertising_2) <- c("Sales", "Chanel", "Advertising")
tail(advertising_2)
ggplot(data = advertising_2, aes(x = Advertising, y = Sales, color = Chanel))
ggplot(data = advertising_2, aes(x = Advertising, y = Sales, color = Chanel)) +
geom_point(size = 2)
ggplot(data = advertising_2, aes(x = Advertising, y = Sales, color = Chanel)) +
geom_point(size = 2) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Relación entre el gasto en publicidad y las ventas",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia con informción de \nURL: https://www.statlearning.com/s/Advertising.csv"
)
#ggsave("G_Advertising.png", width = 20, height = 10, units = "cm")
ggplot(data = advertising_2[ which(advertising_2$Chanel== 'TV'), ],
aes(x = Advertising, y = Sales)) +
geom_point(size = 2, color = 'darkred') +
theme_ipsum() + #theme_bw()
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Relación entre el gasto en publicidad en TV y las ventas",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia con informción de \nURL: https://www.statlearning.com/s/Advertising.csv"
)
#ggsave("G_Advertising_TV.png", width = 20, height = 10, units = "cm")
ggplot(data = advertising_2[ which(advertising_2$Chanel== 'radio'), ],
aes(x = Advertising, y = Sales)) +
geom_point(size = 2, color = 'darkblue') +
theme_ipsum() + #theme_bw()
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Relación entre el gasto en publicidad en radio y las ventas",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia con informción de \nURL: https://www.statlearning.com/s/Advertising.csv"
)
#ggsave("G_Advertising_radio.png", width = 20, height = 10, units = "cm")
ggplot(data = advertising_2[ which(advertising_2$Chanel== 'newspaper'), ],
aes(x = Advertising, y = Sales)) +
geom_point(size = 2, color = 'darkgreen') +
theme_ipsum() + #theme_bw()
theme(legend.position = "none") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Relación entre el gasto en publicidad en periódicos y las ventas",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia con informción de \nURL: https://www.statlearning.com/s/Advertising.csv"
)
#ggsave("G_Advertising_newspaper.png", width = 20, height = 10, units = "cm")
summary(advertising)
Reg_01 <- lm(sales ~ TV + radio + newspaper,
data = advertising)
summary(Reg_01)
Reg_02 <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + newspaper,
data = advertising)
summary(Reg_02)
Reg_03 <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + I(radio^2) + I(radio^3) +
newspaper + I(newspaper^2) + I(newspaper^3),
data = advertising)
summary(Reg_03)
advertising$Reg_01 <- predict( Reg_01, advertising )
advertising$Reg_02 <- predict( Reg_02, advertising )
advertising$Reg_03 <- predict( Reg_03, advertising )
advertising_3 <- melt(advertising[ , c("sales", "Reg_01", "Reg_02", "Reg_03")],
id='sales')
View(advertising_3)
names(advertising_3) <- c("Sales", "Model", "Predict")
tail(advertising_3)
advertising$Reg_01 <- predict( Reg_01, advertising )
advertising$Reg_02 <- predict( Reg_02, advertising )
advertising$Reg_03 <- predict( Reg_03, advertising )
advertising_3 <- melt(advertising[ , c("sales", "Reg_01", "Reg_02", "Reg_03")],
id='sales')
names(advertising_3) <- c("Sales", "Model", "Predict")
tail(advertising_3)
ggplot(data = advertising_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
ggplot(data = advertising_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Ventas Predict") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
#
sst <- sum( ( advertising$sales - mean( advertising$sales ) )^2 , na.rm = TRUE)
sse_Reg_01 <- sum( ( advertising$Reg_01 - advertising$sales )^2 , na.rm = TRUE)
sse_Reg_02 <- sum( ( advertising$Reg_02 - advertising$sales )^2 , na.rm = TRUE)
sse_Reg_03 <- sum( ( advertising$Reg_03 - advertising$sales )^2 , na.rm = TRUE)
Results_Models <- data.frame( Modelo = c( "Model", "Model Poly(3-TV)", "Model Poly(3-All)"),
R.Sqrt_Est = c( 1 - sse_Reg_01/sst,
1 - sse_Reg_02/sst,
1 - sse_Reg_03/sst ) )
Results_Models
set.seed(1234) #
trainIndex <- createDataPartition( advertising$sales ,
p = 0.7 , times = 1, list = FALSE )
trainIndex
set.seed(1234) #
trainIndex <- createDataPartition( advertising$sales ,
p = 0.7 , times = 1, list = FALSE )
advertising_Train <- advertising[ trainIndex , ]
advertising_Valid <- advertising[ -trainIndex , ]
View(advertising_Train)
View(advertising_Valid)
summary(advertising_Train[ , c("sales", "TV", "radio", "newspaper")])
summary(advertising_Valid[ , c("sales", "TV", "radio", "newspaper")])
Reg_Train <- lm( sales ~ TV + I(TV^2) + I(TV^3) +
radio + newspaper,
data = advertising_Train)
summary(Reg_Train)
advertising$Reg_OverAll <- predict( Reg_Train, advertising )
advertising_Train$Reg_OverTrain <- predict( Reg_Train, advertising_Train )
advertising_Valid$Reg_OverValid <- predict( Reg_Train, advertising_Valid )
sst_OverAll <- sum( ( advertising$sales - mean( advertising$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverAll <- sum( ( advertising$Reg_OverAll - advertising$sales )^2 , na.rm = TRUE)
sst_OverTrain <- sum( ( advertising_Train$sales - mean( advertising_Train$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverTrain <- sum( ( advertising_Train$Reg_OverTrain - advertising_Train$sales )^2 , na.rm = TRUE)
sst_OverValid <- sum( ( advertising_Valid$sales - mean( advertising_Valid$sales ) )^2 , na.rm = TRUE)
sse_Reg_OverValid <- sum( ( advertising_Valid$Reg_OverValid - advertising_Valid$sales )^2 , na.rm = TRUE)
Results_Models <- data.frame( Modelo = c( "Muestra Total", "Muestra de Entrenamiento", "Muestra de Validación"),
R.Sqrt_Est = c( 1 - sse_Reg_OverAll/sst_OverAll,
1 - sse_Reg_OverTrain/sst_OverTrain,
1 - sse_Reg_OverValid/sst_OverValid ) )
Results_Models
advertising_Valid_3 <- melt(advertising_Valid[ , c("sales", "Reg_02", "Reg_OverValid")],
id='sales')
names(advertising_Valid_3) <- c("Sales", "Model", "Predict")
ggplot(data = advertising_Valid_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Gasto en publicidad") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
advertising_Valid_3 <- melt(advertising_Valid[ , c("sales", "Reg_02", "Reg_OverValid")],
id='sales')
names(advertising_Valid_3) <- c("Sales", "Model", "Predict")
ggplot(data = advertising_Valid_3, aes(x = Predict, y = Sales, color = Model)) +
geom_point(size = 2, alpha = 0.5) +
theme_ipsum() + #theme_bw()
theme(legend.position = "bottom") +
theme(legend.title = element_blank()) +
guides(col = guide_legend(nrow = 1, byrow = TRUE)) +
xlab("Ventas Predict") +
ylab("Ventas") +
theme(plot.title = element_text(size = 11, face = "bold", hjust = 0)) +
theme(plot.subtitle = element_text(size = 10, hjust = 0)) +
theme(plot.caption = element_text(hjust = 0)) +
theme(plot.margin = unit(c(1,1,1,1), "cm")) +
labs(
title = "Comparación del desempeño de los modelos",
subtitle = "Valores en pesos",
caption = "Fuente: Elaboración propia."
)
knitr::opts_chunk$set(echo = TRUE) # Valor predeterminado global para los encabezados de chunks
#install.packages("rmarkdown")
#library(rmarkdown)
Nodos <- paste0( "08MDN-115", ",", "01NEC-85", ",", "01ITD-115", ",", "01PCC-85", ",", "06PTA-138")
Nodos
# Definir los parámetros de la URL
sistema <- "SIN"
proceso <- "MDA"
lista_nodos <- Nodos
anio_ini <- "2024"
mes_ini <- "09"
dia_ini <- "01"
anio_fin <- "2024"
mes_fin <- "09"
dia_fin <- "07"
formato <- "JSON"
# Construir la URL de invocación
url <- paste0("https://ws01.cenace.gob.mx:8082/SWPML/SIM/",
sistema, "/", proceso, "/", lista_nodos, "/",
anio_ini, "/", mes_ini, "/", dia_ini, "/",
anio_fin, "/", mes_fin, "/", dia_fin, "/",
formato)
# Construir la URL de invocación
url <- paste0("https://ws01.cenace.gob.mx:8082/SWPML/SIM/",
sistema, "/", proceso, "/", lista_nodos, "/",
anio_ini, "/", mes_ini, "/", dia_ini, "/",
anio_fin, "/", mes_fin, "/", dia_fin, "/",
formato)
url
# Realizar la solicitud GET al servicio web
respuesta <- GET(url)
#install.packages("plotly") # Paquetería de visualización interactiva
#install.packages("httr") # Biblioteca que tiene funciones para consulta Web
# Do you want to install from sources the package which needs compilation? (Yes/no/cancel) Y
#install.packages("jsonlite") # Para manejo de archivos JSON
#install.packages("DT") # Para manejo de tablas
library(plotly)
library(httr)
library(jsonlite)
library(DT)
# Realizar la solicitud GET al servicio web
respuesta <- GET(url)
View(respuesta)
View(respuesta)
# Convertir el JSON en un DataFrame
datos <- fromJSON(content(respuesta, "text"), flatten = TRUE)
View(datos)
# Convertir la lista anidada "Resultados" en un DataFrame
resultados_df <- datos$Resultados
View(resultados_df)
View(resultados_df[[2]][[1]])
View(resultados_df[[2]][[1]])
# Utilizar lapply para extraer DataFrames contenidos en la columna 'lista_de_dataframes'
dataframes_extraidos <- lapply(resultados_df$Valores, function(x) as.data.frame(x))
View(dataframes_extraidos)
dataframes_extraidos[[1]]$fecha
Datos_PML <- as.data.frame( cbind( Fecha = dataframes_extraidos[[1]]$fecha,
Hora = dataframes_extraidos[[1]]$hora,
PML_08MDN.115 = dataframes_extraidos[[1]]$pml,
PML_01NEC.85 = dataframes_extraidos[[2]]$pml,
PML_01ITD.115 = dataframes_extraidos[[3]]$pml,
PML_01PCC.85 = dataframes_extraidos[[4]]$pml,
PML_06PTA.138 = dataframes_extraidos[[5]]$pml ) )
tail(Datos_PML)
View(Datos_PML)
View(datos)
View(dataframes_extraidos)
View(resultados_df)
View(resultados_df[[2]][[1]])
df_Means <- data.frame( PML_08MDN.115 = mean(as.numeric(Datos_PML$PML_08MDN.115)),
PML_01NEC.85 = mean(as.numeric(Datos_PML$PML_01NEC.85)),
PML_01ITD.115 = mean(as.numeric(Datos_PML$PML_01ITD.115)),
PML_01PCC.85 = mean(as.numeric(Datos_PML$PML_01PCC.85)),
PML_06PTA.138 = mean(as.numeric(Datos_PML$PML_06PTA.138)) )
View(df_Means)
View(df_Means)
df_Means <- data.frame( PML_08MDN.115 = mean(as.numeric(Datos_PML$PML_08MDN.115)),
PML_01NEC.85 = mean(as.numeric(Datos_PML$PML_01NEC.85)),
PML_01ITD.115 = mean(as.numeric(Datos_PML$PML_01ITD.115)),
PML_01PCC.85 = mean(as.numeric(Datos_PML$PML_01PCC.85)),
PML_06PTA.138 = mean(as.numeric(Datos_PML$PML_06PTA.138)) )
datatable( df_Means, rownames = F, options = list(ordering = T),
filter = list( position = 'top', clear = T )) %>%
formatCurrency( c(1:5), currency = "$", interval = 3, mark = ",", digits = 2)
Datos_PML$Fecha
# Creamos variable de fecha
Datos_PML$Periodo <- as.POSIXct( paste( Datos_PML$Fecha, Datos_PML$Hora, sep = " "),
format = "%Y-%m-%d %H" )
View(Datos_PML)
fig <- plot_ly( x = Datos_PML$Periodo, y = as.numeric( Datos_PML$PML_08MDN.115), name = '08MDN-115',
type = 'scatter', mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkblue'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig
fig <- plot_ly( x = Datos_PML$Periodo, y = as.numeric( Datos_PML$PML_08MDN.115), name = '08MDN-115',
type = 'scatter', mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkblue'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01NEC.85 ), name = '01NEC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkred'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01ITD.115 ), name = '01ITD-115',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkgreen'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01PCC.85 ), name = '01PCC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'gold'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_06PTA.138 ), name = '06PTA.138',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'orange'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig
fig <- fig %>% layout(legend = list(x = 0.1, y = 1.0, orientation = 'h'))
fig
fig <- fig %>% layout( xaxis = list(title = "Time", tickangle = 0),
yaxis = list(title = "MXN", tickformat = "$,"),
font = list( family = "calibri", size = 14, color = 'black'))
fig
# Creamos variable de fecha
Datos_PML$Periodo <- as.POSIXct( paste( Datos_PML$Fecha, Datos_PML$Hora, sep = " "),
format = "%Y-%m-%d %H" )
fig <- plot_ly( x = Datos_PML$Periodo, y = as.numeric( Datos_PML$PML_08MDN.115), name = '08MDN-115',
type = 'scatter', mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkblue'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01NEC.85 ), name = '01NEC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkred'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01ITD.115 ), name = '01ITD-115',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'darkgreen'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_01PCC.85 ), name = '01PCC-85',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'gold'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% add_trace( y = as.numeric( Datos_PML$PML_06PTA.138 ), name = '06PTA.138',
type = 'scatter',  mode = 'lines', text = Datos_PML$Periodo,
line = list(color = 'orange'),
hovertemplate = paste( '<b>Precio</b>: $%{y:,.2f} en el momento: ',
'<b>%{text}</b>') )
fig <- fig %>% layout(legend = list(x = 0.1, y = 1.0, orientation = 'h'))
fig <- fig %>% layout( xaxis = list(title = "Time", tickangle = 0),
yaxis = list(title = "MXN", tickformat = "$,"),
font = list( family = "calibri", size = 14, color = 'black'))
fig
